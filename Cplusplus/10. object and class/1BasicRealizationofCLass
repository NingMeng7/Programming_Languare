(1) object-oriented programming：  //  对象导向的编程 oriented... 
  a)  抽象
  b)  封装和数据隐藏
  c)  多态
  d)  继承
  e)  代码的可重用性
  
考虑现在要统计球员武磊的生涯总数据，我们考虑编程来实现，首先来看看一个面向过程的程序员会如何思考这个问题。
a)  我要输入这个球员的名字、出场次数、进球数、场均进球率、错失单刀数...等基本的数据
b)  我自然会考虑从main()函数出发，调用一个函数来请求用户进行输入，再调用一个函数来进行计算一些需要处理才能得到的数据。
c)  因为比赛场次很多，我可能会考虑在main()函数中通过循环和分支语句来实现一个菜单循环的功能。
d)  最终我会考虑使用数组，字符串等数据类型来储存所要保存的数据。

如果是一个OOP的程序员:
a)  既然是object-oriented,我当然会先想到我跟踪的object:选手武磊，因此我需要一个对象来表示这个选手，这将是一个能够表示各项信息的基本的数据类型。
b)  由于比赛不断进行，我需要一个能够与之交互，添加信息的方法。
c)  同样，我需要处理一些数据，这个基本的数据类型应该能够有一些处理输入数据的方法。
d)  最终，我会有查询信息的交互需求。
总而言之，OOP编程将会从用户的角度考虑对象————描述对象所需的数据以及描述用户与数据交互所需要的操作。之后对象对于用户将会呈现透明，用户通过接口的描述与之
进行交互。

(2) 抽象与类
a)  抽象: 将问题的本质特征抽象简化，进而根据特征描述解决方案，设计接口。
b)  数据基本类型包含的信息:  (i) 数据对象所需要的内存数量 (ii) 如何解释内存中的位 (iii) 可使用数据对象执行的操作或者方法
c)  类:  将抽象转化为用户定义类型的C++工具，用户需要付出时间与精力来设计自己的类，但是因此获得了定制新数据类型的灵活性。

  类规范：
    (i) 类声明: 以数据成员的方式描述数据部分，以成员函数(方法)的方式描述公有接口。
    (ii)类方法定义: 描述如何实现类成员函数。
    类声明提供整体类的设计蓝图，而类方法定义提供了细节。

  为了开发一个类并编写使用它的程序，通常：
    (i) 将接口(类定义)放在头文件中
    (ii) 将实现(类方法的代码)放在源代码文件中。
  一种常用的约定: 类名首字母大写。

(3) 类的声明
通常声明放在头文件中，同时，在接口的描述中，我们只提供成员函数的原型。
a)  关键字private 与 public： 类的默认访问控制为private，显式写出private会使得数据隐藏的概念更加清晰
    所有使用类对象的程序都可以直接访问公有部分，但是只能通过公有部分的成员函数(友元函数)来对类的私有成分进行访问
b)  封装: 将实现细节放在一起并将其与抽象分开
    数据隐藏: 将数据放在类的私有部分，防止数据直接访问数据
    封装是OOP中非常重要的一个概念，通过数据隐藏不仅能够防止直接访问数据，同时让用户无需了解数据的表示方式，抽象出的数据类型将会通过接口得到完全描述。
    而在之后的维护中，我们只需要对实现的细节进行修改而不需要改动接口部分，这样使得程序的维护更加简单。
	
	无论类成员是数据成员还是成员函数，都可以在类的公有部分或者私有部分中进行声明，但由于数据隐藏的精神，我们通常把数据放在私有部分，而把组成类接口的成员函数放在共有部分。


(4) 细节 ~ 类成员函数的实现 : 类似常规函数定义，但是有两个特殊的地方
    (i) 定义成员函数的时候，使用作用域解析运算符(::)来标识函数所属的类
    (ii)类方法可以访问类的private组件
 如: void Stock::update(double price)
 我们将 Stock::update()称为 (qualified name, 函数的限定名), 而 update()是全名的缩写(unqualified name)
 
    每个类实例有自己的存储空间来存储其内部变量和类成员，但是同一个类的所有对象共享一组方法，每一种方法只有一个副本。
