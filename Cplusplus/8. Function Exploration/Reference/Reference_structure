(1) 常规return: 从概念上说，要返回的值将会先被复制到一个临时位置，调用程序将会使用这个值。
(2) 返回引用: 直接返回结构的引用，不需要复制整个结构，效率更高
(3) 常规返回也决定了，由于返回的是一个临时变量，随时会被删除，因此只能作为右值
(4) 返回const能够避免将返回值用于左值
(5) 注意，应该避免返回函数终止时不再存在的内存单元的引用：例如，在子函数内部定义的变量的引用

#include <iostream>
#include <string>
struct free_throws
{
	std::string name;
	int made;
	int attempts;
	float percent;
};

void display(const free_throws & ft);	// const引用，临时变量
void set_pc(free_throws & ft);
free_throws & accumulate(free_throws & target, const free_throws & source);	//	返回引用

int main()
{
	free_throws one = { "Ifelsa Branch", 13, 14 };
	free_throws two = { "Andor Knowtt",10,16 };
	free_throws three = { "Minnie Max",7,9 };
	free_throws four = { "Whily Looper", 5, 9 };
	free_throws five = { "Long Long", 6, 14 };
	free_throws team = { "Throwgoods",0,0 };
	free_throws dup;

	set_pc(one);
	display(one);
	accumulate(team, one);	//	返回的仍然是team对象
	display(team);

	display(accumulate(team, two));
	accumulate(accumulate(team, three), four);
	display(team);

	dup = accumulate(team, five);
	std::cout << "Displaying team:\n";
	display(team);
	std::cout << "Displaying dup after assignment:\n";
	display(dup);
	set_pc(four);

	accumulate(dup, five) = four;
	std::cout << "Displaying dup after ill-advised assignment:\n";
	display(dup);
	while (std::cin.get() != 'q')
		;
	return 0;
}


void display(const free_throws & ft)
{
	using std::cout;
	using std::endl;
	cout << "Name: " << ft.name << endl;
	cout << "  Made: " << ft.made << '\t';
	cout << "Attempts: " << ft.attempts << '\t';
	cout << "Percent: " << ft.percent << endl;
}

void set_pc(free_throws &ft)
{
	if (ft.attempts != 0)
		ft.percent = 100.0f * float(ft.made) / float(ft.attempts);
	else
		ft.percent = 0;
}

free_throws & accumulate(free_throws & target, const free_throws & source)
{
	target.attempts += source.attempts;
	target.made += source.made;
	set_pc(target);
	return target;
}

