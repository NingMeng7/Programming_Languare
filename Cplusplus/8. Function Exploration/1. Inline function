Code Segment

(1) 常规函数调用
  
  编译的最终产品是可执行程序：由一组机器语言指令组成，当运行程序的时候，操作系统把这些指令载入到计算机内存中，计算机逐步执行这些指令，除非碰到
转移指令(如循环或者分支语句，函数调用等等），将跳过一些指令，向前或者向后跳到特定的地址，函数调用将会使程序执行的过程来回跳跃，这意味着正常调用函数
会产生一定的开销。

(2) 内联函数
 
 内联函数的编译代码将会与其他程序代码“内联”起来，编译器将会使用相应的函数代码替换函数调用，使得函数不需要在不同的位置切换，从而提高程序的运行速度，代价
是增加了内存的开销，在10个地方调用内联函数，就需要10个内联函数副本。
考虑在函数调用时间>函数执行时间，并且函数经常被调用的地方采用内联函数

(3) 内联函数使用

a)  在函数声明前加上关键字 inline
b)  在函数定义前加上关键字 Inline
c)  通常省略原型，将整个定义(函数头+所有函数代码)放在本应该提供原型的地方。

(4) 内联函数不能递归，并且如果内联函数太大，编译器可能会拒绝请求

